{"id":"node_modules/ndarray-fft/fft.js","dependencies":[{"name":"/Users/huyifan/HE_js/mnist/package.json","includedInParent":true,"mtime":1547006932931},{"name":"/Users/huyifan/HE_js/mnist/.babelrc","includedInParent":true,"mtime":1546601936000},{"name":"/Users/huyifan/HE_js/mnist/node_modules/ndarray-fft/package.json","includedInParent":true,"mtime":1546999610671},{"name":"ndarray-ops","loc":{"line":3,"column":18},"parent":"/Users/huyifan/HE_js/mnist/node_modules/ndarray-fft/fft.js","resolved":"/Users/huyifan/HE_js/mnist/node_modules/ndarray-ops/ndarray-ops.js"},{"name":"ndarray","loc":{"line":4,"column":22},"parent":"/Users/huyifan/HE_js/mnist/node_modules/ndarray-fft/fft.js","resolved":"/Users/huyifan/HE_js/mnist/node_modules/ndarray/ndarray.js"},{"name":"typedarray-pool","loc":{"line":5,"column":19},"parent":"/Users/huyifan/HE_js/mnist/node_modules/ndarray-fft/fft.js","resolved":"/Users/huyifan/HE_js/mnist/node_modules/typedarray-pool/pool.js"},{"name":"./lib/fft-matrix.js","loc":{"line":6,"column":19},"parent":"/Users/huyifan/HE_js/mnist/node_modules/ndarray-fft/fft.js","resolved":"/Users/huyifan/HE_js/mnist/node_modules/ndarray-fft/lib/fft-matrix.js"}],"generated":{"js":"'use strict'\r\n\r\nvar ops = require('ndarray-ops')\r\nvar ndarray = require('ndarray')\r\nvar pool = require('typedarray-pool')\r\nvar fftm = require('./lib/fft-matrix.js')\r\n\r\nfunction ndfft(dir, x, y) {\r\n  var shape = x.shape\r\n    , d = shape.length\r\n    , size = 1\r\n    , stride = new Array(d)\r\n    , pad = 0\r\n    , i, j\r\n  for(i=d-1; i>=0; --i) {\r\n    stride[i] = size\r\n    size *= shape[i]\r\n    pad = Math.max(pad, fftm.scratchMemory(shape[i]))\r\n    if(x.shape[i] !== y.shape[i]) {\r\n      throw new Error('Shape mismatch, real and imaginary arrays must have same size')\r\n    }\r\n  }\r\n  var buf_size = 4 * size + pad\r\n  var buffer\r\n  if( x.dtype === 'array' ||\r\n      x.dtype === 'float64' ||\r\n      x.dtype === 'custom' ) {\r\n    buffer = pool.mallocDouble(buf_size)\r\n  } else {\r\n    buffer = pool.mallocFloat(buf_size)\r\n  }\r\n  var x1 = ndarray(buffer, shape.slice(0), stride, 0)\r\n    , y1 = ndarray(buffer, shape.slice(0), stride.slice(0), size)\r\n    , x2 = ndarray(buffer, shape.slice(0), stride.slice(0), 2*size)\r\n    , y2 = ndarray(buffer, shape.slice(0), stride.slice(0), 3*size)\r\n    , tmp, n, s1, s2\r\n    , scratch_ptr = 4 * size\r\n  \r\n  //Copy into x1/y1\r\n  ops.assign(x1, x)\r\n  ops.assign(y1, y)\r\n  \r\n  for(i=d-1; i>=0; --i) {\r\n    fftm(dir, size/shape[i], shape[i], buffer, x1.offset, y1.offset, scratch_ptr)\r\n    if(i === 0) {\r\n      break\r\n    }\r\n    \r\n    //Compute new stride for x2/y2\r\n    n = 1\r\n    s1 = x2.stride\r\n    s2 = y2.stride\r\n    for(j=i-1; j<d; ++j) {\r\n      s2[j] = s1[j] = n\r\n      n *= shape[j]\r\n    }\r\n    for(j=i-2; j>=0; --j) {\r\n      s2[j] = s1[j] = n\r\n      n *= shape[j]\r\n    }\r\n    \r\n    //Transpose\r\n    ops.assign(x2, x1)\r\n    ops.assign(y2, y1)\r\n    \r\n    //Swap buffers\r\n    tmp = x1\r\n    x1 = x2\r\n    x2 = tmp\r\n    tmp = y1\r\n    y1 = y2\r\n    y2 = tmp\r\n  }\r\n  \r\n  //Copy result back into x\r\n  ops.assign(x, x1)\r\n  ops.assign(y, y1)\r\n  \r\n  pool.free(buffer)\r\n}\r\n\r\nmodule.exports = ndfft","map":{"mappings":[{"source":"node_modules/ndarray-fft/fft.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ndarray-fft/fft.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}}],"sources":{"node_modules/ndarray-fft/fft.js":"'use strict'\r\n\r\nvar ops = require('ndarray-ops')\r\nvar ndarray = require('ndarray')\r\nvar pool = require('typedarray-pool')\r\nvar fftm = require('./lib/fft-matrix.js')\r\n\r\nfunction ndfft(dir, x, y) {\r\n  var shape = x.shape\r\n    , d = shape.length\r\n    , size = 1\r\n    , stride = new Array(d)\r\n    , pad = 0\r\n    , i, j\r\n  for(i=d-1; i>=0; --i) {\r\n    stride[i] = size\r\n    size *= shape[i]\r\n    pad = Math.max(pad, fftm.scratchMemory(shape[i]))\r\n    if(x.shape[i] !== y.shape[i]) {\r\n      throw new Error('Shape mismatch, real and imaginary arrays must have same size')\r\n    }\r\n  }\r\n  var buf_size = 4 * size + pad\r\n  var buffer\r\n  if( x.dtype === 'array' ||\r\n      x.dtype === 'float64' ||\r\n      x.dtype === 'custom' ) {\r\n    buffer = pool.mallocDouble(buf_size)\r\n  } else {\r\n    buffer = pool.mallocFloat(buf_size)\r\n  }\r\n  var x1 = ndarray(buffer, shape.slice(0), stride, 0)\r\n    , y1 = ndarray(buffer, shape.slice(0), stride.slice(0), size)\r\n    , x2 = ndarray(buffer, shape.slice(0), stride.slice(0), 2*size)\r\n    , y2 = ndarray(buffer, shape.slice(0), stride.slice(0), 3*size)\r\n    , tmp, n, s1, s2\r\n    , scratch_ptr = 4 * size\r\n  \r\n  //Copy into x1/y1\r\n  ops.assign(x1, x)\r\n  ops.assign(y1, y)\r\n  \r\n  for(i=d-1; i>=0; --i) {\r\n    fftm(dir, size/shape[i], shape[i], buffer, x1.offset, y1.offset, scratch_ptr)\r\n    if(i === 0) {\r\n      break\r\n    }\r\n    \r\n    //Compute new stride for x2/y2\r\n    n = 1\r\n    s1 = x2.stride\r\n    s2 = y2.stride\r\n    for(j=i-1; j<d; ++j) {\r\n      s2[j] = s1[j] = n\r\n      n *= shape[j]\r\n    }\r\n    for(j=i-2; j>=0; --j) {\r\n      s2[j] = s1[j] = n\r\n      n *= shape[j]\r\n    }\r\n    \r\n    //Transpose\r\n    ops.assign(x2, x1)\r\n    ops.assign(y2, y1)\r\n    \r\n    //Swap buffers\r\n    tmp = x1\r\n    x1 = x2\r\n    x2 = tmp\r\n    tmp = y1\r\n    y1 = y2\r\n    y2 = tmp\r\n  }\r\n  \r\n  //Copy result back into x\r\n  ops.assign(x, x1)\r\n  ops.assign(y, y1)\r\n  \r\n  pool.free(buffer)\r\n}\r\n\r\nmodule.exports = ndfft"},"lineCount":82}},"hash":"8a1a6ec73211ae6838a550ff4c13a411","cacheData":{"env":{}}}