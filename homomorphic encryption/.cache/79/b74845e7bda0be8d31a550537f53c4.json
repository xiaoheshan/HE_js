{"id":"node_modules/numjs/src/images/rgb2gray.js","dependencies":[{"name":"/Users/huyifan/HE_js/homomorphic encryption/package.json","includedInParent":true,"mtime":1547007344002},{"name":"/Users/huyifan/HE_js/homomorphic encryption/.babelrc","includedInParent":true,"mtime":1546601936000},{"name":"/Users/huyifan/HE_js/homomorphic encryption/node_modules/numjs/package.json","includedInParent":true,"mtime":1546999610650},{"name":"cwise","loc":{"line":3,"column":20},"parent":"/Users/huyifan/HE_js/homomorphic encryption/node_modules/numjs/src/images/rgb2gray.js","resolved":"/Users/huyifan/HE_js/homomorphic encryption/node_modules/cwise/lib/cwise-esprima.js"},{"name":"../ndarray","loc":{"line":4,"column":22},"parent":"/Users/huyifan/HE_js/homomorphic encryption/node_modules/numjs/src/images/rgb2gray.js","resolved":"/Users/huyifan/HE_js/homomorphic encryption/node_modules/numjs/src/ndarray.js"},{"name":"../utils","loc":{"line":5,"column":17},"parent":"/Users/huyifan/HE_js/homomorphic encryption/node_modules/numjs/src/images/rgb2gray.js","resolved":"/Users/huyifan/HE_js/homomorphic encryption/node_modules/numjs/src/utils.js"}],"generated":{"js":"'use strict';\n\nvar cwise = require('cwise');\nvar NdArray = require('../ndarray');\nvar __ = require('../utils');\n\n// takes ~157ms on a 5000x5000 image\nvar doRgb2gray = cwise({\n  args: ['array', 'array', 'array', 'array'],\n  body: function rgb2grayCwise (y, xR, xG, xB) {\n    y = (xR * 4899 + xG * 9617 + xB * 1868 + 8192) >> 14;\n  }\n});\n\n/**\n * Compute Grayscale version of an RGB image.\n * @param {NdArray}  img The image in RGB format. In a 3-D array of shape (h, w, 3), or in RGBA format with shape (h, w, 4).\n * @returns {NdArray} The grayscale image, a 3-D array  of shape (h, w, 1).\n */\nmodule.exports = function rgb2gray (img) {\n  if (!(img instanceof NdArray)) {\n    img = new NdArray(img); // assume it is an ndarray\n  }\n  var iShape = img.shape;\n  var h = iShape[0];\n  var w = iShape[1];\n  var k = (iShape[2] || 1);\n  if (k === 1) {\n    return img; // already gray\n  }\n  var oShape = [h, w];\n  var out = new NdArray(new Uint8Array(__.shapeSize(oShape)), oShape);\n  var r = img.selection.pick(null, null, 0);\n  var g = img.selection.pick(null, null, 1);\n  var b = img.selection.pick(null, null, 2);\n  doRgb2gray(out.selection, r, g, b);\n\n  return out;\n};\n","map":{"mappings":[{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/numjs/src/images/rgb2gray.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"node_modules/numjs/src/images/rgb2gray.js":"'use strict';\n\nvar cwise = require('cwise');\nvar NdArray = require('../ndarray');\nvar __ = require('../utils');\n\n// takes ~157ms on a 5000x5000 image\nvar doRgb2gray = cwise({\n  args: ['array', 'array', 'array', 'array'],\n  body: function rgb2grayCwise (y, xR, xG, xB) {\n    y = (xR * 4899 + xG * 9617 + xB * 1868 + 8192) >> 14;\n  }\n});\n\n/**\n * Compute Grayscale version of an RGB image.\n * @param {NdArray}  img The image in RGB format. In a 3-D array of shape (h, w, 3), or in RGBA format with shape (h, w, 4).\n * @returns {NdArray} The grayscale image, a 3-D array  of shape (h, w, 1).\n */\nmodule.exports = function rgb2gray (img) {\n  if (!(img instanceof NdArray)) {\n    img = new NdArray(img); // assume it is an ndarray\n  }\n  var iShape = img.shape;\n  var h = iShape[0];\n  var w = iShape[1];\n  var k = (iShape[2] || 1);\n  if (k === 1) {\n    return img; // already gray\n  }\n  var oShape = [h, w];\n  var out = new NdArray(new Uint8Array(__.shapeSize(oShape)), oShape);\n  var r = img.selection.pick(null, null, 0);\n  var g = img.selection.pick(null, null, 1);\n  var b = img.selection.pick(null, null, 2);\n  doRgb2gray(out.selection, r, g, b);\n\n  return out;\n};\n"},"lineCount":40}},"hash":"bb998a652d3bc604e6b4eb2dceeaa91f","cacheData":{"env":{}}}